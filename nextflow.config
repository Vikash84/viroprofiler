/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ViroProfiler Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // TODO nf-core: Specify your pipeline's command line flags
    // Input options
    input                      = null
    db                         = "${HOME}/viroprofiler"
    mode                       = 'all'                // ["setup", "all"]
    input_contigs              = null
    decontam                   = null
    reads_type                 = "raw"                // ["raw", "clean"]

    // ViroProfiler modules
    use_abricate               = false
    use_decontam               = false
    use_eggnog                 = false
    use_dram                   = true
    use_iphop                  = true
    use_kraken2                = false
    use_phamb                  = false

    // References
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Boilerplate options
    outdir                     = 'output'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    enable_conda               = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '8.GB'
    max_cpus                   = 1
    max_time                   = '12.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/viroprofiler custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/viroprofiler.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/viroprofiler profiles: ${params.custom_config_base}/pipeline/viroprofiler.config")
// }


profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    standard {
        process.executor       = 'local'
        process.cpus           = 1
        process.memory         = 1.GB
    }
    conda {
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    test { includeConfig 'conf/test.config' }
    test_denglab { 
        includeConfig 'conf/test.config'
        includeConfig 'custom.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

process {
    withLabel: setup {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
        time = { check_max( 12.h * task.attempt, 'time') }
    }

    withName: ABRICATE {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
    }

    withName: ABUNDANCE {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 1.GB * task.attempt, 'memory') }
    }

    withName: BACPHLIP {
        ext.args = "--multi_fasta"
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }
    
    withName: CHECKV {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
    }

    withName: CONTIGLIB {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
    }

    withName: CONTIGLIB_CLUSTER {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }

    withName: DB_DRAM {
        cpus ={ check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 30.GB * task.attempt, 'memory') }
    }

    withName: DB_KRAKEN2 {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 1.GB * task.attempt, 'memory') }
    }

    withName: DB_VIBRANT {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: DB_VIRSORTER2 {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: DB_VREFSEQ {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: DECONTAM {
        ext.args = 'maxindel=1 bwr=0.16 bw=12 quickmatch fast minhits=2 qtrim=rl trimq=10 pigz=True untrim'
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
    }

    withName: DRAMV {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 50.GB * task.attempt, 'memory') }
    }

    withName: DVF {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }

    withName: EMAPPER {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
    }

    withName: FASTQC {
        ext.args = '--quiet'
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
    }

    withName: FASTP {
        ext.args = "-f 15 -t 1 -F 15 -T 1 --detect_adapter_for_pe -p -n 1 -l 30 -5 -W 4 -M 20 -r -c -g -x"
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
    }

    withName: GENEPRED {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 2.GB * task.attempt, 'memory') }
    }

    withName: MAPPING2CONTIGS {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 4.GB * task.attempt, 'memory') }
    }

    withName: MICOMPLETEDB {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: MULTIQC {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 1.GB * task.attempt, 'memory') }
    }

    withName: NRSEQS {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: PHAMB_RF {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: REPLIDEC {
        cpus = { check_max( 2 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: SPADES {
        ext.args = "--meta"
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
    }

    withName: TAXONOMY_MERGE {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 1.GB * task.attempt, 'memory') }
    }

    withName: TAXONOMY_MMSEQS {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
    }

    withName: TAXONOMY_VCONTACT {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 20.GB * task.attempt, 'memory') }
    }

    withName: VAMB {
        cpus = { check_max( 4 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: VIBRANT {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: VIRALHOST_IPHOP {
        cpus = { check_max( 12 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: VIRSORTER2 {
        cpus = { check_max( 8 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: VOGDB {
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }

    withName: VRHYME {
        ext.args = "--method longest"
        cpus = { check_max( 1 * task.attempt, 'cpus') }
        memory = { check_max( 8.GB * task.attempt, 'memory') }
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'ViroProfiler'
    author          = 'Jinlong Ru'
    homePage        = 'https://github.com/deng-lab/viroprofiler'
    description     = 'A containerized bioinformatics pipeline for viral metagenomic data analysis'
    mainScript      = 'main.nf'
    nextflowVersion = '>=22.04.0'
    version         = '0.2'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
